<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vzard&#39;s blog</title>
  <subtitle>just do it</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vzardlloo.github.io/"/>
  <updated>2017-08-26T00:28:34.643Z</updated>
  <id>http://vzardlloo.github.io/</id>
  
  <author>
    <name>vzardlloo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修复hexo博客的一个bug</title>
    <link href="http://vzardlloo.github.io/2017/08/25/%E4%BF%AE%E5%A4%8Dhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%B8%AAbug/"/>
    <id>http://vzardlloo.github.io/2017/08/25/修复hexo博客的一个bug/</id>
    <published>2017-08-25T10:18:37.000Z</published>
    <updated>2017-08-26T00:28:34.643Z</updated>
    
    <content type="html"><![CDATA[<p>之前不小心把JAVA分类写成了java发布了，然后又改了回来，并且手动地在博客<code>public/categories/</code>和<code>.deploy_git/categories/</code>下的java文件夹改成JAVA重新发布，结果在点击JAVA分类时会报404。经过一番研究我发现虽然我本地都将java改成了JAVA,但是GitHub仓库里的文件夹名称还是java。对比“java”和“JAVA”我猜测可能是git大小写不敏感所以JAVA并没有覆盖掉java，谷歌一下果然如此。由于我把java改成了JAVA所以在网页点击”分类”时访问的是：<code>https://xxxxxxxx/JAVA/</code>,而GitHub仓库里依然是java，只能访问<code>https://xxxxxxxxxx/java/</code>，由于http协议对于URL是大小写敏感的，所以访问<code>https://xxxxxxxx/JAVA/</code>必然会报404。找到问题所在下面开始修复bug:</p>
<ol>
<li>进入.deploy_git文件夹，输入<code>git config core.ignorecase false</code>把忽略大小写<br>关闭。(必须要进入.deploy_git执行命令，因为只有这个文件夹是git仓库，这里的文件才会推送到GitHub仓库)</li>
<li>回到博客根目录，执行<code>hexo d</code>重新发布博客</li>
</ol>
<p>执行完毕，bug修复！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前不小心把JAVA分类写成了java发布了，然后又改了回来，并且手动地在博客&lt;code&gt;public/categories/&lt;/code&gt;和&lt;code&gt;.deploy_git/categories/&lt;/code&gt;下的java文件夹改成JAVA重新发布，结果在点击JAVA分
    
    </summary>
    
      <category term="hexo" scheme="http://vzardlloo.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://vzardlloo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用脚本提高效率</title>
    <link href="http://vzardlloo.github.io/2017/08/25/%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/"/>
    <id>http://vzardlloo.github.io/2017/08/25/利用脚本提高效率/</id>
    <published>2017-08-25T08:51:04.000Z</published>
    <updated>2017-08-25T10:00:03.798Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来像SQL、shell脚本、DOS批处理等DSL和类DSL的东西都处于看了忘，忘了再看的无限循环中，在平时不怎么使用的情况要长久地记住这些东西从生理学上讲是不可能的。所以有两种方案：</p>
<ol>
<li>经常去使用它，比如完全使用Linux工作</li>
<li>用到的时候，现场搜索，copy-paste大法好。</li>
</ol>
<p>对于我来说1是我的追求，2是我的现状。</p>
<p>命令行脚本对比于点鼠标有不少优势，比如可以一次把一些命令写在一个脚本里，然后执行，比起用鼠标每次都要点很多下效率要高的多，特别是当有很多台机器时用鼠标来操作无疑会是一场灾难更别提有的命令鼠标根本没法点，当然鼠标也有它的优势，当仅仅是个人电脑，并且一些操作用命令行无比冗长时，用鼠标只需点击一下便可完成操作此时鼠标更占优势。对于命令行还是鼠标的选择可能大致如下图：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/script.png" alt=""><br><a id="more"></a><br>在我们日常生活中可能很多都是灰色区域的情况，为了达到效率最大化我们可以采取这样的策略：找到那些经常需要重复的、比较固定的步骤把它写成脚本，比如博客的预览和发布，每次都是执行一些固定的步骤，完全可以把它写成一个脚本，还有本地仓库与Github同步，我最近就写了一个脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"********************"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"******开始提交******"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"********************"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [<span class="string">"<span class="variable">$1</span>"</span> == <span class="string">""</span>]</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">set</span> <span class="string">"默认提交，无特殊信息"</span></div><div class="line"></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">git status</div><div class="line">git add .</div><div class="line">git commit -m <span class="variable">$1</span></div><div class="line">git push </div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"**********************"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"*******提交成功*******"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"**********************"</span></div></pre></td></tr></table></figure></p>
<p>非常简单的一个脚本，但是大大地提高了效率。而对于那些偶发性比较高、重复性低的的操作就采用点鼠标的方式。这种思想其实非常类似于JAVA中的HotSpot虚拟机的工作方式，把热点代码编译成本地机器码，从而提高效率，我们是把“热点”操作“编译”成脚本，从而提高效率。高大上的虚拟机技术和日常生活小经验也有着异曲同工之妙！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来像SQL、shell脚本、DOS批处理等DSL和类DSL的东西都处于看了忘，忘了再看的无限循环中，在平时不怎么使用的情况要长久地记住这些东西从生理学上讲是不可能的。所以有两种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;经常去使用它，比如完全使用Linux工作&lt;/li&gt;
&lt;li&gt;用到的时候，现场搜索，copy-paste大法好。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于我来说1是我的追求，2是我的现状。&lt;/p&gt;
&lt;p&gt;命令行脚本对比于点鼠标有不少优势，比如可以一次把一些命令写在一个脚本里，然后执行，比起用鼠标每次都要点很多下效率要高的多，特别是当有很多台机器时用鼠标来操作无疑会是一场灾难更别提有的命令鼠标根本没法点，当然鼠标也有它的优势，当仅仅是个人电脑，并且一些操作用命令行无比冗长时，用鼠标只需点击一下便可完成操作此时鼠标更占优势。对于命令行还是鼠标的选择可能大致如下图：&lt;br&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/script.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://vzardlloo.github.io/categories/Linux/"/>
    
    
      <category term="shell Linux" scheme="http://vzardlloo.github.io/tags/shell-Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC工作流程和Demo示例</title>
    <link href="http://vzardlloo.github.io/2017/08/24/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%92%8CDemo%E7%A4%BA%E4%BE%8B/"/>
    <id>http://vzardlloo.github.io/2017/08/24/SpringMVC工作流程和Demo示例/</id>
    <published>2017-08-24T14:46:44.000Z</published>
    <updated>2017-08-25T08:45:51.204Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC是Spring下的一个模块，与Spring自然无缝衔接，相比Structs2我更喜欢SpringMVC。这篇博客介绍一下SpringMVC的基本工作流程最后会附上一个小demo可供演示。<br>先上一张图：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/SpringMVC.png" alt=""><br>这张图展示了SpringMVC大致的工作流程，下面开始逐步讲解：</p>
<ol>
<li>用户通过浏览器发送一个Http给Web应用。</li>
<li>如果该请求与web.xml中DisPatcherServlet的配置匹配，则将该请求交由DispatcherServlet处理。</li>
<li>DispatcherServlet根据请求的信息URL、HTTP处理器等信息以及HandlerMapping的配置找到处理请求的Handler(一般是Controller)。</li>
<li>找到Handler后，通过HandlerAdapter对Handler进行封装，使用统一的接口来调用Handler.</li>
<li>在Handler完成业务处理之后返回一个ModelAndView给DispatcherServlet,ModelAndView，顾名思义，其中包含一个逻辑视图名和模型数据信息。</li>
<li>然后DisPatcherServlet调用ViewResolver完成逻辑视图名到真实的视图对象的解析。</li>
<li>当得到真实的视图对象View后，DispatcherServlet会用这个View对ModelAndView中的视图对象进行渲染。</li>
<li>最终返回客户端一个Http相应，可能是HTML页面，也可能是一个图片等。</li>
</ol>
<p>下面做一个demo来实践一下整个过程：<br><a id="more"></a></p>
<ul>
<li>先用IDEA创建一个空的的maven工程(也可以new-&gt;project-&gt;maven-&gt;勾选create from archetype-&gt;选中webapp，但感觉有问题)。然后按照web应用目录结构手动创建一个webapp及其子目录。</li>
<li>在pom.xml中添加依赖，最终结果如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>SpringMVC-Demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意要添加jstl依赖，否则会报错。</p>
<ul>
<li>配置web.xml和xxx-servlet.xml文件，配置如下：<br>web.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Springmvc-demo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>vzard<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>vzard<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--解决中文post乱码--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>vzard-servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--指明 controller 所在包，并扫描其中的注解--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.vzard.Controller"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 静态资源(js、image等)的访问 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 开启注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--ViewResolver 视图解析器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--用于支持Servlet、JSP视图解析--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里要注意的是还要添加一个applicationContext.xml文件，这个文件是Spring的全局配置文件，亲测不配置会报错，里面可以不配置东西，但是这个文件一定要有。</p>
<p>applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>然后就是业务逻辑分析部分，这个demo要做的事是：开启应用–&gt;进入欢迎页，点击注册–&gt;进入注册页面，输入信息,点击提交–&gt;进入注册成功页面，显示用户信息</li>
<li>业务逻辑实现：<br>UserController类：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.Controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.vzard.domain.User;</div><div class="line"><span class="keyword">import</span> org.vzard.service.UserService;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by V-zar on 2017/8/25.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="comment">// @Autowired(required = false)</span></div><div class="line">    <span class="comment">//UserService userService;</span></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/adduser"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"adduser"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/success"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="comment">//userService.creatUser(user);</span></div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">        modelAndView.setViewName(<span class="string">"success"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"user"</span>, user);</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>User类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> org.vzard.domain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by V-zar on 2017/8/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String userName;</div><div class="line">    <span class="keyword">public</span> String password;</div><div class="line">    <span class="keyword">public</span> String realName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRealName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> realName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRealName</span><span class="params">(String realName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.realName = realName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前端界面引入了Bootstrap（然并卵，还是巨丑，懒得写界面）：<br>index.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"form"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC Demo 首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">    &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>WELCOME<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">adduser</span>"/&gt;</span>"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>adduser.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC Demo 首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">    &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">success</span>"&gt;</span><span class="tag">&lt;/<span class="name">c:url</span>&gt;</span> "&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">aria-label</span>=<span class="string">"Amount (to the nearest dollar)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">aria-label</span>=<span class="string">"Amount (to the nearest dollar)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"realName"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">aria-label</span>=<span class="string">"Amount (to the nearest dollar)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">aria-label</span>=<span class="string">"Right Align"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>success.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC Demo 首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">    &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎，$&#123;user.userName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您的密码是：$&#123;user.password&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您的真实姓名是：$&#123;user.realName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/spmvc01.png" alt=""></p>
<p><img src="http://oo3aq3ac8.bkt.clouddn.com/spmvc02.png" alt=""></p>
<p><img src="http://oo3aq3ac8.bkt.clouddn.com/spmvc03.png" alt=""></p>
<p>完整demo可在我的github上clone运行：<a href="https://github.com/vzardlloo/SpringMVC-learning" target="_blank" rel="external">Demo</a><br>运行环境&amp;工具：</p>
<ul>
<li>IDEA</li>
<li>JDK 1.8</li>
<li>Tomcat 8.5</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringMVC是Spring下的一个模块，与Spring自然无缝衔接，相比Structs2我更喜欢SpringMVC。这篇博客介绍一下SpringMVC的基本工作流程最后会附上一个小demo可供演示。&lt;br&gt;先上一张图：&lt;br&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/SpringMVC.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这张图展示了SpringMVC大致的工作流程，下面开始逐步讲解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户通过浏览器发送一个Http给Web应用。&lt;/li&gt;
&lt;li&gt;如果该请求与web.xml中DisPatcherServlet的配置匹配，则将该请求交由DispatcherServlet处理。&lt;/li&gt;
&lt;li&gt;DispatcherServlet根据请求的信息URL、HTTP处理器等信息以及HandlerMapping的配置找到处理请求的Handler(一般是Controller)。&lt;/li&gt;
&lt;li&gt;找到Handler后，通过HandlerAdapter对Handler进行封装，使用统一的接口来调用Handler.&lt;/li&gt;
&lt;li&gt;在Handler完成业务处理之后返回一个ModelAndView给DispatcherServlet,ModelAndView，顾名思义，其中包含一个逻辑视图名和模型数据信息。&lt;/li&gt;
&lt;li&gt;然后DisPatcherServlet调用ViewResolver完成逻辑视图名到真实的视图对象的解析。&lt;/li&gt;
&lt;li&gt;当得到真实的视图对象View后，DispatcherServlet会用这个View对ModelAndView中的视图对象进行渲染。&lt;/li&gt;
&lt;li&gt;最终返回客户端一个Http相应，可能是HTML页面，也可能是一个图片等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面做一个demo来实践一下整个过程：&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="web Java SpringMVC" scheme="http://vzardlloo.github.io/tags/web-Java-SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Servlet小结</title>
    <link href="http://vzardlloo.github.io/2017/08/21/Servlet%E5%B0%8F%E7%BB%93/"/>
    <id>http://vzardlloo.github.io/2017/08/21/Servlet小结/</id>
    <published>2017-08-21T13:19:08.000Z</published>
    <updated>2017-08-24T12:57:23.699Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Servlet是JAVA Web的底层技术，有着很重要的地位。下面分几点简单总结下：</p>
<ul>
<li>1、Servlet家族</li>
<li>2、Servlet–HelloWorld!</li>
<li>3、Servlet生命周期</li>
</ul>
<h4 id="servlet家族"><a href="#Servlet家族" class="headerlink" title="Servlet家族"></a>Servlet家族</h4><p><img src="http://oo3aq3ac8.bkt.clouddn.com/servletfamily.png" alt=""><br>上图是Servlet家族类图，其中可以看出HttpServlet继承自GenericServlet,GenericServlet继承自HttpServlet。它们的结构如下：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/servlet.png" alt="servlet" title="Servlet"><br><img src="http://oo3aq3ac8.bkt.clouddn.com/GenericServlet.png" alt="GenericsServlet" title="GenericsServlet"><br><img src="http://oo3aq3ac8.bkt.clouddn.com/httpservlet.png" alt="HttpServlet" title="HttpServlet"></p>
<p>可以看出Servlet的结构非常简单，仅仅定义了<code>init()</code>、<code>service</code>、<code>desdroy</code>三个控制生命周期的方法，GenericServlet对Servlet<br>进行了一些拓展，增加了<code>log()</code>、<code>getInitParameter()</code>等方法，HttpServlet对GenericServlet又进行了拓展，增加了Http协议的相关方法。<br><a id="more"></a></p>
<h4 id="servlethelloworld"><a href="#Servlet–HelloWorld" class="headerlink" title="Servlet–HelloWorld!"></a>Servlet–HelloWorld!</h4><ol>
<li>在tomcat中新建一个web应用<code>hello</code>，在web应用中新建一个<code>WEB-INF/classes</code>目录。</li>
<li>在<code>classes</code>目录新建一个<code>MyServlet</code>。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.ServletRequest;</div><div class="line">import javax.servlet.ServletResponse;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.OutputStream;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by V-zar on 2017/8/21.</div><div class="line"> */</div><div class="line">public class MyServlet extends HttpServlet &#123;</div><div class="line"></div><div class="line">    public  void service(ServletRequest request, ServletResponse response) throws ServletException,IOException&#123;</div><div class="line"></div><div class="line">        OutputStream op = response.getOutputStream();</div><div class="line">        op.write(&quot;HelloWorld!&quot;.getBytes());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编译，<code>javac -cp %CATALINA_HOME%/lib/servlet-api.jar -d . MyServlet.java</code>，参考<a href="http://www.iitshare.com/under-the-cmd-compile-the-java.html" target="_blank" rel="external">这篇博客</a></li>
<li>在<code>WEB-INF</code>目录中新建一个<code>web.xml</code>文件，配置<code>servlet</code>的对外访问路径。</li>
<li>启动tomcat访问。</li>
</ol>
<h4 id="servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h4><p>先上一张图：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/javaweb_servlet-lifecycle.png" alt=""><br>解读：</p>
<ol>
<li>浏览器发送http请求到Servlet容器(假设为Tomcat)。</li>
<li>Tomcat根据请求找到对应的Web应用。</li>
<li><p>Web应用里的web.xml里的配置找到请求对应的Servlet,如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>得到servlet.class的字符串内容。</p>
</li>
<li>Tomcat通过反射构造servlet对象。</li>
<li>Tomcat调用servlet构造方法，servlet对象执行构造方法。</li>
<li>Tomcat创建ServletConfig对象，并调用servlet的init()方法，servlet执行init()方法。</li>
<li>Tomcat创建request和response对象，并调用servlet的service()方法,servlet执行service()方法。</li>
<li>servlet返回修改过的response给Tomcat。</li>
<li>Tomcat将返回的response对象渲染成相应格式并发送给浏览器。</li>
<li>servlet调用destroy方法，servlet被销毁。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;Servlet是JAVA Web的底层技术，有着很重要的地位。下面分几点简单总结下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、Servlet家族&lt;/li&gt;
&lt;li&gt;2、Servlet–HelloWorld!&lt;/li&gt;
&lt;li&gt;3、Servlet生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Servlet家族&quot;&gt;&lt;a href=&quot;#Servlet家族&quot; class=&quot;headerlink&quot; title=&quot;Servlet家族&quot;&gt;&lt;/a&gt;Servlet家族&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/servletfamily.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上图是Servlet家族类图，其中可以看出HttpServlet继承自GenericServlet,GenericServlet继承自HttpServlet。它们的结构如下：&lt;br&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/servlet.png&quot; alt=&quot;servlet&quot; title=&quot;Servlet&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/GenericServlet.png&quot; alt=&quot;GenericsServlet&quot; title=&quot;GenericsServlet&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/httpservlet.png&quot; alt=&quot;HttpServlet&quot; title=&quot;HttpServlet&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看出Servlet的结构非常简单，仅仅定义了&lt;code&gt;init()&lt;/code&gt;、&lt;code&gt;service&lt;/code&gt;、&lt;code&gt;desdroy&lt;/code&gt;三个控制生命周期的方法，GenericServlet对Servlet&lt;br&gt;进行了一些拓展，增加了&lt;code&gt;log()&lt;/code&gt;、&lt;code&gt;getInitParameter()&lt;/code&gt;等方法，HttpServlet对GenericServlet又进行了拓展，增加了Http协议的相关方法。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="web Java" scheme="http://vzardlloo.github.io/tags/web-Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础回顾-垃圾回收</title>
    <link href="http://vzardlloo.github.io/2017/08/20/JAVA%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://vzardlloo.github.io/2017/08/20/JAVA基础回顾-垃圾回收/</id>
    <published>2017-08-20T08:23:52.000Z</published>
    <updated>2017-08-20T12:45:20.183Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>开始跳过这节没有写，因为不太知道怎么写才条理清晰。现在整理了一下思路，在宏观上有了点脉络。垃圾回收（Garbage Collection),以下简称GC,长久以来人们一直研究的GC需要完成3件事情：</p>
<ul>
<li>1、那些内存需要回收？</li>
<li>2、什么时候回收？</li>
<li>3、如何回收？</li>
</ul>
<h4 id="那些内存需要回收"><a href="#那些内存需要回收？" class="headerlink" title="那些内存需要回收？"></a>那些内存需要回收？</h4><p>这一块在JAVA中的基本可以转化为判断堆和方法区上哪些对象已经死去(不被任何途径使用)，那些死去的对象就是需要回收的内存。<br>主要有两种算法：</p>
<ul>
<li><p>引用计数法：给对象添加一个引用计数器，每当有一个地方引用它时计数器就加1，引用失效时计数器就减1，当计数器的值为0时，该对象判为“死亡”。<br><code>优点</code>：实现简单，效率高<br><code>缺点</code>：不能解决循环引用的问题</p>
</li>
<li><p>可达性分析算法：选取一些对象作为“GC root”作为起始点，然后沿着引用开始向下搜索，当一个对象对于所有“GC root”都是不可达的，那么这个对象可以判为“死亡”。(主流虚拟机采用的方式)。</p>
<a id="more"></a>
</li>
</ul>
<h4 id="什么时候回收"><a href="#什么时候回收？" class="headerlink" title="什么时候回收？"></a>什么时候回收？</h4><ul>
<li>从虚拟机的角度来说：GC又分为 minor GC 和 Full GC (也称为 Major GC )。Java 堆内存分为新生代和老年代，新生代中又分为1个 Eden 区域 和两个 Survivor 区域。<br>那么对于 Minor GC 的触发条件：大多数情况下，对象直接在 Eden 区中进行分配。如果 Eden区域没有足够的空间，那么就会发起一次 Minor GC。对于 Full GC（Major GC）的触发条件：也是如果老年代没有足够空间的话，那么就会进行一次 Full GC。<br>Ps：上面所说的只是一般情况下，实际上，需要考虑一个空间分配担保的问题：<br>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。如果大于则进行Minor GC，如果小于则看HandlePromotionFailure设置是否允许担保失败（不允许则直接Full GC）。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于则尝试Minor GC（如果尝试失败也会触发Full GC），如果小于则进行Full GC。<br>但是，具体到什么时刻执行，这个是由系统来进行决定，是无法预测的。</li>
<li>从对象的角度来说：当一个对象被标记为“死亡”时，并非立即执行死刑。要真正执行死刑要经历至少两次标记。一次是在被判为“死亡”的时候，然后会进行一次筛选，筛选的方法是看是否有必要执行finalize()方法，当finalize()方法没有被覆盖或者已经被调用了则认为“没有执行的必要”。如果对象被判为有必要执行则会被放到一个叫F-Queue的队列中，然后GC会对F-Queue中的对象进行标记，这是对象逃脱GC的最后一次机会，如果在此还未逃脱，那就真的要被回收了。</li>
</ul>
<h4 id="如何回收"><a href="#如何回收？" class="headerlink" title="如何回收？"></a>如何回收？</h4><ul>
<li><p>标记-清除(Mark-Sweep)算法：首先标记所有需要回收的对象，在标记完成后统一回收所有被标记的对象。<br><code>优点</code>：实现简单<br><code>缺点</code>：效率低下，会产生大量的内存碎片</p>
</li>
<li><p>复制算法(Copying)：将内存按容量分成两块，当这一块内存快用完了，就将还活着的对象复制到另一块去，然后再将已使用过的内存空间一次清理掉。<br><code>优点</code>：实现简单，运行高效，不存在碎片问题<br><code>缺点</code>：内存利用率低</p>
</li>
<li><p>标记-整理(Mark-Compact)算法:首先标记所有需要回收的对象，在标记完成后统一整理，使其都向一端移动，然后直接清理端边界外的内存。<br><code>优点</code>：结合了Mark-Sweep和Copying的优点<br><code>缺点</code>：算法实现较为复杂</p>
</li>
<li><p>分代收集算法：根据对象生存周期的不同对内存进行划分。一般将Java堆划成新生代和老年代，这样就可以根据各个年代的特点采用最合适的垃圾收集算法。比如新生代对象”朝生夕死”的情况比较多，可以采用复制算法，老年代对象存活率高，可以采用标记-清除或标记-整理算法。</p>
</li>
</ul>
<h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><p>这里不做过多讲解，放一JDK1.7Update14后的HotSpot虚拟机包含的Java虚拟机图示：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/GCtool.png" alt=""><br><em>其中注意G1收集器是当前收集器技术的最前沿成果之一</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;开始跳过这节没有写，因为不太知道怎么写才条理清晰。现在整理了一下思路，在宏观上有了点脉络。垃圾回收（Garbage Collection),以下简称GC,长久以来人们一直研究的GC需要完成3件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、那些内存需要回收？&lt;/li&gt;
&lt;li&gt;2、什么时候回收？&lt;/li&gt;
&lt;li&gt;3、如何回收？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;那些内存需要回收？&quot;&gt;&lt;a href=&quot;#那些内存需要回收？&quot; class=&quot;headerlink&quot; title=&quot;那些内存需要回收？&quot;&gt;&lt;/a&gt;那些内存需要回收？&lt;/h4&gt;&lt;p&gt;这一块在JAVA中的基本可以转化为判断堆和方法区上哪些对象已经死去(不被任何途径使用)，那些死去的对象就是需要回收的内存。&lt;br&gt;主要有两种算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引用计数法：给对象添加一个引用计数器，每当有一个地方引用它时计数器就加1，引用失效时计数器就减1，当计数器的值为0时，该对象判为“死亡”。&lt;br&gt;&lt;code&gt;优点&lt;/code&gt;：实现简单，效率高&lt;br&gt;&lt;code&gt;缺点&lt;/code&gt;：不能解决循环引用的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可达性分析算法：选取一些对象作为“GC root”作为起始点，然后沿着引用开始向下搜索，当一个对象对于所有“GC root”都是不可达的，那么这个对象可以判为“死亡”。(主流虚拟机采用的方式)。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="jvm" scheme="http://vzardlloo.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础回顾-双亲委派模型</title>
    <link href="http://vzardlloo.github.io/2017/08/15/JAVA%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://vzardlloo.github.io/2017/08/15/JAVA基础回顾-双亲委派模型/</id>
    <published>2017-08-15T02:49:02.000Z</published>
    <updated>2017-08-15T13:11:20.756Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><img src="http://oo3aq3ac8.bkt.clouddn.com/mother.jpg" alt=""><br>“give it to your mother,she knows how to do it”,这是一张温馨又搞笑的图片，温馨在于展示了母亲对我们的关爱与呵护，搞笑是表现了很多人对衣物上的那些各种标识的含义一无所知的现状。但是我在看到这张图的时候想到的却不是这个，我想的是如果一个人遵从指示”give it to his/her mother”,然后mother又遵从指示”give it to her mother”(也就是给了奶奶)，如果奶奶又遵从指示”give it to her mother”…想到这我不禁感叹幸亏人类的寿命是有限的，不然这件衣服永远也洗不成:-),但是类似这样的事情在JAVA的世界里是真实存在的，那就是双亲委派模型。<br><a id="more"></a></p>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>在JAVA中对于任意一个类，都需要由加载他的类加载器和这个类本身来一同确定其在虚拟机中的唯一性，每一个类加载器都有一个独立的类名称空间。也就是说比较两个是否“相等”,只有在这个两个类是由同一个类加载器加载的前提下才有比较的意义，否则，就算这两个来源自同一个Class文件，被同一个虚拟机加载，只要不是被同一个类加载器加载，那这两个类就必然不相等。下面用代码举例说明：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> myutil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by V-zar on 2017/8/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">        ClassLoader myClassLoader = <span class="keyword">new</span> ClassLoader() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">               <span class="keyword">try</span>&#123;</div><div class="line">                   String fileName = name.substring(name.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>)+<span class="string">".class"</span>;</div><div class="line">                   InputStream is = getClass().getResourceAsStream(fileName);</div><div class="line">                   <span class="keyword">if</span>(is == <span class="keyword">null</span>)&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</div><div class="line">                   is.read(b);</div><div class="line">                   <span class="keyword">return</span> defineClass(name,b,<span class="number">0</span>,b.length);</div><div class="line">               &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">               &#125;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        Object obj = myClassLoader.loadClass(<span class="string">"myutil.ClassLoaderTest"</span>).newInstance();</div><div class="line">        System.out.println(obj.getClass());         <span class="comment">//#1</span></div><div class="line">        System.out.println(obj <span class="keyword">instanceof</span> myutil.ClassLoaderTest);  <span class="comment">//#2</span></div><div class="line">        System.out.println(myutil.ClassLoaderTest.class.getClassLoader());<span class="comment">//#3</span></div><div class="line">        System.out.println(obj.getClass().getClassLoader());    <span class="comment">//#4</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class myutil.ClassLoaderTest</div><div class="line">false</div><div class="line">sun.misc.Launcher$AppClassLoader@18b4aac2</div><div class="line">myutil.ClassLoaderTest$1@6e0be858</div></pre></td></tr></table></figure></p>
<p>在代码中我们构造了一个简单的类加载器，它可以加载与自己在同一路径下的Class文件。我们用这个类加载器来加载<code>myutil.ClassLoaderTest</code>这个类，并且实例化了这个类的对象obj。在代码#1处我们获取obj的Class对象，发现权限定名为<code>myutil.ClassLoaderTest</code>。下一步代码#2是将obj与权限定名为<code>myutil.ClassLoader</code>的类作instanceof比较，但是结果为false,这个结果看似很不合常理，因为在#1处已经获取obj的Class对象，权限定名就是<code>myutil.ClassLoaderTest</code>。接着看#3和#4,我们分别获取了obj和<code>myutil.ClassLoader</code>的类加载器并将其打印到控制台,从打印结果可以看出两者的加载器并不相同。这就是#2处程序执行结果为false的原因。</p>
<h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>从上面的例子可以看出类加载器对于Java类的重要性，但是对于众多的类加载器必然需要用一种方式来组织它们不然势必会造成混乱。在Java中类加载器的组织模型就是双亲委派模型。双亲委派模型的工作过程是：如果一个类加载器收到了类加载请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成(“give it to your mother:D”),然后每一层都是这样，因此所有的类加载器最终都应该传送到最顶层的类加载器中，当上层类加载器无法完成这个加载请求时(他的搜索范围中没有找到所需要的类)，子加载器才会尝试自己去加载。这样有个显而易见的好处就是Java类随着它的类加载器一起具备了一种层级关系，可以让最基础的、使用范围最广的一些类由最顶层的类加载器来加载，可以保证在任何类加载器环境下它都可以被正确的加载。比如java.lang.Object，如果不用双亲委派模型来加载的话，如果用户自行编写了一个称为java.lang.Object，并且放置在ClassPath中， 那系统中将会出现多个不同的Object类，那么JAVA类型体系中最基础的行为也就得不到保证。<br>在JAVA中双亲委派模型的实现代码主要在java.lang.ClassLoader的loadClass()方法中，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</div><div class="line">        <span class="keyword">throws</span> ClassNotFoundException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</div><div class="line">            <span class="comment">// First, check if the class has already been loaded</span></div><div class="line">            Class&lt;?&gt; c = findLoadedClass(name);</div><div class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        c = findBootstrapClassOrNull(name);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></div><div class="line">                    <span class="comment">// from the non-null parent class loader</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></div><div class="line">                    <span class="comment">// to find the class.</span></div><div class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line">                    c = findClass(name);</div><div class="line"></div><div class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></div><div class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</div><div class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</div><div class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (resolve) &#123;</div><div class="line">                resolveClass(c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>分析：逻辑很简单粗暴，先检查有没有被加载过，如果没有则调用父类的loadClass()方法，若父加载器为空则默认使用JAVA中的顶级类加载器–Bootstrap ClassLoader作为父类加载器来尝试加载，如果父类加载失败则抛出ClassNotFoundException异常后，再调用自己的findClass。最后，这些过程都是同步的。<br>Java 中的类加载器大致可以分成两类，一类是系统提供的，另外一类则是由 Java 应用开发人员编写的。系统提供的类加载器主要有下面三个：</p>
<ul>
<li>引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。</li>
<li>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li>
<li>系统类加载器（system class loader）：它根据 Java<br>应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java<br>应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。<br>除了系统提供的类加载器以外，开发人员可以通过继承java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。<blockquote>
<p>类加载器树状组织结构示意图<br><img src="http://oo3aq3ac8.bkt.clouddn.com/classloader.png" alt=""></p>
</blockquote>
</li>
</ul>
<p>另外值得一提的是JAVA的双亲委派模型不是一个强制性的约束模型，只是一种JAVA设计者推荐的类加载器实现方式，在有些时候还需要打破这种模式（例如利用Thread ConText ClassLoader 加载 SPI代码）和OSGi技术。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/mother.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;“give it to your mother,she knows how to do it”,这是一张温馨又搞笑的图片，温馨在于展示了母亲对我们的关爱与呵护，搞笑是表现了很多人对衣物上的那些各种标识的含义一无所知的现状。但是我在看到这张图的时候想到的却不是这个，我想的是如果一个人遵从指示”give it to his/her mother”,然后mother又遵从指示”give it to her mother”(也就是给了奶奶)，如果奶奶又遵从指示”give it to her mother”…想到这我不禁感叹幸亏人类的寿命是有限的，不然这件衣服永远也洗不成:-),但是类似这样的事情在JAVA的世界里是真实存在的，那就是双亲委派模型。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="jvm" scheme="http://vzardlloo.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础回顾-字节码指令</title>
    <link href="http://vzardlloo.github.io/2017/08/10/JAVA%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/"/>
    <id>http://vzardlloo.github.io/2017/08/10/JAVA基础回顾-字节码指令/</id>
    <published>2017-08-10T08:34:19.000Z</published>
    <updated>2017-08-20T12:37:50.026Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>众所周知，Java程序是运行在Java虚拟机上的，而这里的“虚拟”是对什么东西进行虚拟呢？答案当然就是对“实体”机进行虚拟啦，虚拟机可以看做是对实体机进行了进一步的封装和抽象，隐藏了不同实体机之间的差别，从而达成“Write Once,Run AnyWhere”的目标。既然虚拟机是对实体机的虚拟，所以我认为虚拟机和实体机在结构和功能上必然存在某种程度上的对应与关联。因此我们在学习时应该注意发掘和类比两者之间的关系。<br>本着这样的思想，我们进行Java字节码指令的学习。JAVA字节码在JAVA虚拟机中的地位相当于实体机的机器码，一切在Java虚拟机上运行的程序都要被解释或编译成字节码，一切在实体机上运行的程序最后也都要编译成机器码。Java字节码指令可以对字节码进行操作，在实体机中对机器码进行操作的是汇编语言。所以Java字节码指令对应汇编语言，Java字节码指令集对应汇编指令集。</p>
<h4 id="字节码简介"><a href="#字节码简介" class="headerlink" title="字节码简介"></a>字节码简介</h4><p>Java字节码指令由<em>一个</em>字节长度的，代表某种特定操作含义的数字（操作码）以及其后的零至多个代表此操作所需参数（操作数）。此外字节码指令是面向操作数栈的，这里操作数栈在功能上对应实体机的寄存器但是结构上有所区别。<br><a id="more"></a></p>
<h4 id="字节码与数据类型"><a href="#字节码与数据类型" class="headerlink" title="字节码与数据类型"></a>字节码与数据类型</h4><p>在字节码指令集中，大多数指令都对应的其操作所对应的数据类型信息，比如iload表示从局部变量表中加载int型的数据到操作栈中，fload从局部变量表中加载float型的数据到操作栈中…但是由于Java字节码的操作码只有一个字节（即0~255），这意味着指令集的操作码总数不可能超过256条。所以如果要求Java运行时所有的数据类型都有对应的与数据类型相关的指令去支持的话，操作码的总数将超过256条。所以JAVA字节码指令集被设计为Not Orthogonal（非完全独立）,即并非每种数据类型和每种操作都有对应的指令，有一些指令可以在必要的时候将一些不被支持的数据类型转换为被支持的数据类型。我们可以以数据类型为列，操作指令为行制作一张表，其中为空的项即说明虚拟机不支持对这种数据类型进行这项操作。<br><img src="http://oo3aq3ac8.bkt.clouddn.com/jvmcode.PNG" alt=""></p>
<h4 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h4><p>加载和存储指令用于将数据在帧栈中的局部变量表和操作数栈之间传输。</p>
<ul>
<li>将一个局部变量表加载到操作数栈：<br>iload、<code>iload_&lt;n&gt;</code>、lload、lload<em><n>、fload、fload</n></em><n>、dload、<code>dload_&lt;n&gt;</code>、aload、<code>aload_&lt;n&gt;</code>。</n></li>
<li>将一个数值从操作数栈储存到局部变量表：<br>istore,<code>istore_&lt;n&gt;</code>,lstore,<code>lstore_&lt;n&gt;</code>,fstore,<code>fstore_&lt;n&gt;</code>,dstore,<code>dstore_&lt;n&gt;</code>,astore,<code>astore_&lt;n&gt;</code>。</li>
<li><p>将一个常量加载到操作数栈：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bipush,sipush,lde,lde_w,ldc2_w,aconst_null,iconst_ml,iconst_&lt;i&gt;,lconst_&lt;i&gt;,fconst_&lt;i&gt;,dconst_&lt;i&gt;。</div></pre></td></tr></table></figure>
</li>
<li><p>拓充局部变量表的访问引索的指令：wide</p>
</li>
</ul>
<h4 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h4><p>运算指令用于对操作数栈上的值进行某种特定的运算。</p>
<ul>
<li>加法运算：iadd,ladd,fadd,dadd。</li>
<li>减法运算：isub,lsub,fsub,dsub。</li>
<li>乘法运算：imul,lmul,fmul,dmul。</li>
<li>除法运算：idiv,ldiv,fdiv,ddiv。</li>
<li>求余指令：irem,lrem,frem,drem。</li>
<li>取反指令：imeg,lmeg,fmeg,dmeg。</li>
<li>位移指令：ishl,ishr,iushr,lshl,lshr,lushr。</li>
<li>按位或指令：ior,lor。</li>
<li>按位与指令：iand,land。</li>
<li>按位异或指令：ixor,lxor。</li>
<li>局部变量自增指令：iinc。</li>
<li>比较指令：dcmpg,dcmpl,fcmpg,fcmpl,lcmp。<br><em>注：只有在除法指令（idiv,ldiv)和求余指令（irem,lrem)当出现除数为零时会导致虚拟机抛出AirtmeticException异常，其余整形和浮点型运算场景都不会抛出异常</em></li>
</ul>
<h4 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h4><p>类型转换指令可以将两种不同数值类型进行相互转换。<br>Java虚拟机天然支持基本数据类型的宽化类型转换，例如int到long、flost、double等。<br>对于窄化数据类型转化则必须用显示的转换指令：</p>
<ul>
<li>i2b(int -&gt; boolean)</li>
<li>i2c(int -&gt; char)</li>
<li>i2s(int -&gt; short)</li>
<li>l2i(long -&gt; int)</li>
<li>f2i(float -&gt; int)</li>
<li>f2l(float -&gt; long)</li>
<li>d2i(double -&gt; int)</li>
<li>d2l(double -&gt; long)</li>
<li>d2f(double -&gt; float)<br><em>几点说明：</em></li>
<li>int/long 类型窄化转换为整数类型T时，转换过程为丢弃除最低位N（T的数据类型长度）个字节以外的内容。</li>
<li>浮点值窄化转换为整数类型T（int/long)时：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if(浮点值==NaN)&#123;</div><div class="line">    result = 0;</div><div class="line">&#125;else&#123;</div><div class="line">    value = [浮点值];  //向下取整</div><div class="line">    if(T.min &lt;= value &lt;= T.max)&#123;    //value在T的表示范围内</div><div class="line">        result = value;</div><div class="line">    &#125;else&#123;</div><div class="line">        if(value &gt; 0) result = T.max;</div><div class="line">        if(value &lt; 0) result = T.min;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h4><ul>
<li>创建类实例的指令：new</li>
<li>创建数组的指令：newarray,anewarray,multianewarray</li>
<li>访问类字段（static字段）和实例字段（非static字段）的指令：getfield,putfield,getstatic,putstatic</li>
<li>将一个数组元素加载到操作数栈的指令:<br>baload,caload,saload,iaload,faload,daload,aaload</li>
<li>将一个操作数栈的值存储到数组元素中的指令：<br>bastore,castore,iastore,sastore,fastore,fastore,dastore,aastore</li>
<li>取数组长度的指令：arraylength</li>
<li>检查类实例类型的指令：instanceof,checkcast</li>
</ul>
<h4 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h4><ul>
<li>将一个操作数栈的栈顶一个或两个元素出栈：pop、pop2。</li>
<li>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1,dup2_x1,dup_x2,dup2_x2。</li>
<li>将栈顶端的两个数值交换：swap。</li>
</ul>
<h4 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h4><p>控制转移指令可以让Java虚拟机有条件或者无条件的从指定的位置而不是控制转移指令的下一条指令继续执行程序。</p>
<ul>
<li>条件分支：<br>ifeq,ifit,ifle,ifgt,ifnull,ifnonnull,if_icmpeq,if_icmpne,if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne。</li>
<li>复合条件分支：tableswitch,lookupswitch。</li>
<li>无条件分支：gosto,goto_w,jsr,jsr_w,ret。</li>
</ul>
<h4 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h4><ul>
<li>invokevirtual:用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派）。</li>
<li>invokeinterface:用于调用接口方法，它在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。</li>
<li>invokespecial:用于调用一些需要特殊处理的实例方法，包括实例的初始化方法，私有方法和父类方法。</li>
<li>invokestatic:用于调用类方法（static方法）</li>
<li>invokedynamic:用于运行时动态解析出调用点限定符所应用的方法，并执行该方法。（前面的分派逻辑都固化在虚拟机内部，而该指令的分派逻辑是由用户自定义）。</li>
<li>方法返回指令：ireture(返回类型是int,short,byte,char,boolean时),lreturn,freturn,dreturn,areturn,另外还有一条return供void方法、实例/类/接口的初始化方法使用。</li>
</ul>
<h4 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h4><p>显式抛出异常指令：athrow</p>
<h4 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h4><ul>
<li>monitorenter,monitorexit</li>
</ul>
<h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p>我们拿Java里面比较经典的i++和++i问题来做个练习，熟悉下用字节码分析问题：<br>Test Case for ++i:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] argv )</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>  value = <span class="number">0</span>;</div><div class="line">        value = ++value;</div><div class="line"></div><div class="line">        System.out.println(value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：1。<br>对应部分字节码及分析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Code:</div><div class="line">       0: iconst_0                 //将0加载到栈顶</div><div class="line">       1: istore_1                 //将0存储到变量value</div><div class="line">       2: iinc          1, 1       //value在局部变量表自增为1,(此处为虚指令，真实的变量操作要靠load和store指令)</div><div class="line">       5: iload_1                  //将value的值加载到栈顶</div><div class="line">       6: istore_1                 //将栈顶的内容保存到变量value，value=1</div><div class="line">       7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">      10: iload_1</div><div class="line">      11: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</div><div class="line">      14: return</div></pre></td></tr></table></figure></p>
<p>Test Case for i++:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] argv )</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="keyword">int</span>  value = <span class="number">0</span>;</div><div class="line">       value = value++;</div><div class="line"></div><div class="line">        System.out.println(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：0<br>字节码及分析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Code:</div><div class="line">      0: iconst_0              //将0加载到栈顶</div><div class="line">      1: istore_1              //将0存储到变量value</div><div class="line">      2: iload_1               //将value的值加载到栈顶,栈顶为0</div><div class="line">      3: iinc          1, 1    //value在局部变量表自增为1</div><div class="line">      6: istore_1              //将栈顶的内容保存到变量value,value=0</div><div class="line">      7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">     10: iload_1</div><div class="line">     11: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</div><div class="line">     14: return</div></pre></td></tr></table></figure></p>
<p>以上通过字节码分析对这个问题无疑有了更深层次的理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;众所周知，Java程序是运行在Java虚拟机上的，而这里的“虚拟”是对什么东西进行虚拟呢？答案当然就是对“实体”机进行虚拟啦，虚拟机可以看做是对实体机进行了进一步的封装和抽象，隐藏了不同实体机之间的差别，从而达成“Write Once,Run AnyWhere”的目标。既然虚拟机是对实体机的虚拟，所以我认为虚拟机和实体机在结构和功能上必然存在某种程度上的对应与关联。因此我们在学习时应该注意发掘和类比两者之间的关系。&lt;br&gt;本着这样的思想，我们进行Java字节码指令的学习。JAVA字节码在JAVA虚拟机中的地位相当于实体机的机器码，一切在Java虚拟机上运行的程序都要被解释或编译成字节码，一切在实体机上运行的程序最后也都要编译成机器码。Java字节码指令可以对字节码进行操作，在实体机中对机器码进行操作的是汇编语言。所以Java字节码指令对应汇编语言，Java字节码指令集对应汇编指令集。&lt;/p&gt;
&lt;h4 id=&quot;字节码简介&quot;&gt;&lt;a href=&quot;#字节码简介&quot; class=&quot;headerlink&quot; title=&quot;字节码简介&quot;&gt;&lt;/a&gt;字节码简介&lt;/h4&gt;&lt;p&gt;Java字节码指令由&lt;em&gt;一个&lt;/em&gt;字节长度的，代表某种特定操作含义的数字（操作码）以及其后的零至多个代表此操作所需参数（操作数）。此外字节码指令是面向操作数栈的，这里操作数栈在功能上对应实体机的寄存器但是结构上有所区别。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="jvm" scheme="http://vzardlloo.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存模型</title>
    <link href="http://vzardlloo.github.io/2017/07/15/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://vzardlloo.github.io/2017/07/15/JVM内存模型/</id>
    <published>2017-07-15T01:45:23.000Z</published>
    <updated>2017-07-17T13:43:25.909Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客主要讲一下JVM的内存模型。话不多说先上一张概览图：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/jvm.png" alt="JVM内存模型"><br>下面我们主要通过<code>作用</code>、<code>线程私有情况</code>、<code>异常情况</code>、<code>补充说明</code>这四个情况来介绍和说明各个内存区域的情况。</p>
<blockquote>
<p>1、程序计数器：</p>
<ul>
<li><code>作用</code>：程序计数器可以当做当前线程执行的字节码指示器，记录当前执行到那一条指令字节码解释器在工作时就是通过改变这个计数器的值选取下一条需要执行的字节码指令，分支、循环、跳转等基础功能都需要依靠这个计数器来完成。</li>
<li><code>线程私有情况</code>：线程私有，因为Java虚拟机的多线程机制是通过抢占时间片的形式来实现的，就是说在一个确定的时刻，一个处理器只会处理一个线程，那么这就涉及到线程恢复的问题，比如某个线程的执行完第n条指令后，失去了对处理的占用，为了在它抢占到处理器时可以恢复到正确的执行位置（即第n+1条指令处），每个线程必须维护一个独立的程序计数器，不允许被其他线程篡改。所以程序计数器必须是线程私有的。</li>
<li><code>异常情况</code>：它是JAVA虚拟机规范中唯一一个没有规定任何OutOfMemoryError情况的区域</li>
<li><code>补充说明</code>：如果当前线程执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果是执行一个Native(本地)方法，这个计数器则为空（Undefind)。<a id="more"></a>
</li>
</ul>
<p>2、Java虚拟机栈</p>
<ul>
<li><code>作用</code>：在每个方法执行的时候会创建一个帧栈用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用的执行结束的过程就对应一个帧栈在虚拟机栈中入栈到出栈的过程。</li>
<li><code>线程私有情况</code>：线程私有。</li>
<li><code>异常情况</code>：有两种异常：1、当线程请求的栈的深度大于虚拟机栈所允许的深度，将会抛出StackOverflowError异常。2、如果虚拟机栈可以动态拓展，如果在动态拓展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</li>
<li><code>补充说明</code>：局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法所需要的内存大小是完全确定的。在方法运行期间不会改变局部变量表的大小。</li>
</ul>
<p>3、Java堆</p>
<ul>
<li><code>作用</code>：存放对象实例。</li>
<li><code>线程私有情况</code>：线程共享。因为所有线程创建的对象实例几乎都在Java堆上分配内存，所以必然要线程共享。</li>
<li><code>异常情况</code>：Java堆可以通过-Xms和-Xmx来分配Java堆的大小，当堆中没有内存完成实例分配，而且堆中也无法拓展时，将会抛出OutOfMemoryError异常。</li>
<li><code>补充说明</code>：随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将导致一些变化的发生，将不会把所有的对象都分配在对象上了。</li>
</ul>
<p>4、方法区</p>
<ul>
<li><code>作用</code>：用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器后的代码等数据。</li>
<li><code>线程私有情况</code>：线程共享。</li>
<li><code>异常情况</code>：当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</li>
<li><code>补充说明</code>：Java虚拟机对方法区的实现要求比较宽松，可以实现垃圾回收也可以不实现垃圾回收，因为这里垃圾回收的效率非常低，但有些事实表明这里实现垃圾回收是十分必要的。</li>
</ul>
<p>5、运行时常量池</p>
<ul>
<li><code>作用</code>：运行时常量池时方法区的一部分，在Class文件中有专门一个字段来描述这个部分，用于存放编译区生成的各种字面量和符号引用。</li>
<li><code>线程私有情况</code>：线程共享</li>
<li><code>异常情况</code>：常量池无法申请到内存时抛出OutOfMemoryError异常。</li>
<li><code>补充说明</code>：常量池中常量不一定只在编译器产生，运行期也可以将新的常量加入常量池中。典型的例子的是：String类的intern()方法。</li>
</ul>
<p>6、直接内存</p>
<ul>
<li><code>作用</code>：从某种程度上说这并不是JVM的内存区域。但是Java程序可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里的DirectByteBuffer对象作为这块内存的引用进行操作。=，可以避免在Java堆和Native堆中来回数据，可以显著提高性能。</li>
<li><code>线程私有情况</code>：虚拟机外内存，线程共享。</li>
<li><code>异常情况</code>：受到本机物理内存的限制，当无法满足内存分配需求的时候会抛出OutOfMemoryError异常。</li>
<li><code>补充说明</code>：直接内存不是Java虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但这部分内存也被频繁的使用。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客主要讲一下JVM的内存模型。话不多说先上一张概览图：&lt;br&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/jvm.png&quot; alt=&quot;JVM内存模型&quot;&gt;&lt;br&gt;下面我们主要通过&lt;code&gt;作用&lt;/code&gt;、&lt;code&gt;线程私有情况&lt;/code&gt;、&lt;code&gt;异常情况&lt;/code&gt;、&lt;code&gt;补充说明&lt;/code&gt;这四个情况来介绍和说明各个内存区域的情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、程序计数器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;作用&lt;/code&gt;：程序计数器可以当做当前线程执行的字节码指示器，记录当前执行到那一条指令字节码解释器在工作时就是通过改变这个计数器的值选取下一条需要执行的字节码指令，分支、循环、跳转等基础功能都需要依靠这个计数器来完成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;线程私有情况&lt;/code&gt;：线程私有，因为Java虚拟机的多线程机制是通过抢占时间片的形式来实现的，就是说在一个确定的时刻，一个处理器只会处理一个线程，那么这就涉及到线程恢复的问题，比如某个线程的执行完第n条指令后，失去了对处理的占用，为了在它抢占到处理器时可以恢复到正确的执行位置（即第n+1条指令处），每个线程必须维护一个独立的程序计数器，不允许被其他线程篡改。所以程序计数器必须是线程私有的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;异常情况&lt;/code&gt;：它是JAVA虚拟机规范中唯一一个没有规定任何OutOfMemoryError情况的区域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;补充说明&lt;/code&gt;：如果当前线程执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果是执行一个Native(本地)方法，这个计数器则为空（Undefind)。
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="jvm" scheme="http://vzardlloo.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础回顾-自定义注解</title>
    <link href="http://vzardlloo.github.io/2017/07/11/JAVA%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>http://vzardlloo.github.io/2017/07/11/JAVA基础回顾-自定义注解/</id>
    <published>2017-07-11T12:18:00.000Z</published>
    <updated>2017-07-17T13:46:38.377Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客我们来回顾一下Java基础中的注解，主要通过来自定义一套注解来回顾一下这块的知识。</p>
<blockquote>
<p>下面先回顾一下基础知识：</p>
</blockquote>
<p>四个元注解：</p>
<ul>
<li>@Target</li>
<li>@Retention</li>
<li>@Documented</li>
<li>@Inherited</li>
</ul>
<p><em>具体说明: </em>   </p>
<ul>
<li>@Target<br>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</li>
</ul>
<blockquote>
<p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>
</blockquote>
<p>  取值(ElementType)有：<br>　　1. CONSTRUCTOR:用于描述构造器<br>　　2. FIELD:用于描述域<br>　　3. LOCAL_VARIABLE:用于描述局部变量<br>　　4. METHOD:用于描述方法<br>　　5. PACKAGE:用于描述包<br>　　6. PARAMETER:用于描述参数<br>　　7. TYPE:用于描述类、接口(包括注解类型) 或enum声明<br><a id="more"></a>　　　　</p>
<ul>
<li>@Retention<br>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</li>
</ul>
<blockquote>
<p>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p>
</blockquote>
<p>取值（RetentionPoicy）有：<br>　　1. SOURCE:在源文件中有效（即源文件保留）<br>　　2. CLASS:在class文件中有效（即class保留）<br>　　3. RUNTIME:在运行时有效（即运行时保留）</p>
<ul>
<li><p>@Docmented<br>@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
</li>
<li><p>Inherited<br>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。<br>　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。<br>　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p>
</li>
</ul>
<blockquote>
<p>自定义一套注解：</p>
</blockquote>
<p>我们的目的是定义一套注解，可以通过注解来配置人的个人信息，包括姓名，性别，年龄。</p>
<ul>
<li>首先定义@Name，@Gender,@Age三个标签:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> annotation_learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义<span class="doctag">@Name</span>注解</div><div class="line"> * Created by V-zar on 2017/7/11.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Name &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> annotation_learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义<span class="doctag">@Gender</span>注解</div><div class="line"> * Created by V-zar on 2017/7/11.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Gender &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Sex&#123;MALE,FEMALE&#125;;</div><div class="line"></div><div class="line">    <span class="function">Sex <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> Sex.MALE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> annotation_learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义<span class="doctag">@Age</span>注解</div><div class="line"> * Created by V-zar on 2017/7/11.</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Age &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其次定义一个注解处理类，不然注解不会比注释更有用:-)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> annotation_learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义注解处理类</div><div class="line"> * Created by V-zar on 2017/7/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonInfoUtil</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getPersonInfo</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123;</div><div class="line">        String strPersonName = <span class="string">"姓名："</span>;</div><div class="line">        String strPersonSex = <span class="string">"性别："</span>;</div><div class="line">        String strPersonAge = <span class="string">"年龄："</span>;</div><div class="line"></div><div class="line">        Field[] fileds = clazz.getDeclaredFields();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Field filed : fileds)&#123;</div><div class="line">            <span class="keyword">if</span>(filed.isAnnotationPresent(Name.class))&#123;</div><div class="line">                Name name = (Name) filed.getAnnotation(Name.class);</div><div class="line">                System.out.println(strPersonName+name.value()+<span class="string">"\n"</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(filed.isAnnotationPresent(Gender.class))&#123;</div><div class="line">                Gender sex = (Gender) filed.getAnnotation(Gender.class);</div><div class="line">                System.out.println(strPersonSex+sex.value()+<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(filed.isAnnotationPresent(Age.class))&#123;</div><div class="line">                Age age = (Age) filed.getAnnotation(Age.class);</div><div class="line">                System.out.println(strPersonAge+age.value()+<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义一个人物类来测试注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> annotation_learn;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义人物类</div><div class="line"> * Created by V-zar on 2017/7/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Name</span>(<span class="string">"Jack"</span>)</div><div class="line">    <span class="keyword">private</span> String Name;</div><div class="line">    <span class="meta">@Gender</span>(Gender.Sex.MALE)</div><div class="line">    <span class="keyword">private</span> String Sex;</div><div class="line">    <span class="meta">@Age</span>(<span class="number">23</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行测试主函数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> annotation_learn;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试用主函数</div><div class="line"> * Created by V-zar on 2017/7/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        PersonInfoUtil.getPersonInfo(Person.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行结果：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">姓名：Jack</div><div class="line"></div><div class="line">性别：MALE</div><div class="line"></div><div class="line">年龄：23</div><div class="line"></div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<blockquote>
<p>自定义注解成功！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客我们来回顾一下Java基础中的注解，主要通过来自定义一套注解来回顾一下这块的知识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面先回顾一下基础知识：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四个元注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Target&lt;/li&gt;
&lt;li&gt;@Retention&lt;/li&gt;
&lt;li&gt;@Documented&lt;/li&gt;
&lt;li&gt;@Inherited&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;具体说明: &lt;/em&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Target&lt;br&gt;@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  取值(ElementType)有：&lt;br&gt;　　1. CONSTRUCTOR:用于描述构造器&lt;br&gt;　　2. FIELD:用于描述域&lt;br&gt;　　3. LOCAL_VARIABLE:用于描述局部变量&lt;br&gt;　　4. METHOD:用于描述方法&lt;br&gt;　　5. PACKAGE:用于描述包&lt;br&gt;　　6. PARAMETER:用于描述参数&lt;br&gt;　　7. TYPE:用于描述类、接口(包括注解类型) 或enum声明&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>springboot学习之RESTful</title>
    <link href="http://vzardlloo.github.io/2017/07/03/springboot%E5%AD%A6%E4%B9%A0%E4%B9%8BRESTful/"/>
    <id>http://vzardlloo.github.io/2017/07/03/springboot学习之RESTful/</id>
    <published>2017-07-03T11:09:56.000Z</published>
    <updated>2017-07-17T13:46:33.309Z</updated>
    
    <content type="html"><![CDATA[<p>在学习HelloWorld之后，我们来尝试构建一个RESTful工程。</p>
<ul>
<li>什么是REST?<br>首先，REST是Web自身的架构风格。REST也是Web之所以取得成功的技术架构方面因素的总结。REST是世界上最成功的分布式应用架构风格（成功案例：Web，还不够吗？）。它是为 运行在互联网环境 的 分布式 超媒体系统量身定制的。互联网环境与企业内网环境有非常大的差别，最主要的差别是两个方面：<br>可伸缩性需求无法控制：并发访问量可能会暴涨，也可能会暴跌。<br>安全性需求无法控制：无法控制客户端发来的请求的格式，很可能会是恶意的请求。<br>而所谓的“超媒体系统”，即，使用了超文本的系统。可以把“超媒体”理解为超文本+媒体内容。<br>REST是HTTP/1.1协议等Web规范的设计指导原则，HTTP/1.1协议正是为实现REST风格的架构而设计的。新的Web规范，其设计必须符合REST的要求，否则整个Web的体系架构会因为引入严重矛盾而崩溃。这句话不是危言耸听，做个类比，假如苏州市政府同意在市区著名园林的附近大型土木，建造大量具有后现代风格的摩天大楼，那么不久之后世界闻名的苏州园林美景将不复存在。<br>上述这些关于“REST是什么”的描述，可以总结为一句话：REST是所有Web应用都应该遵守的架构设计指导原则。当然，REST并不是法律，违反了REST的指导原则，仍然能够实现应用的功能。但是违反了REST的指导原则，会付出很多代价，特别是对于大流量的网站而言。<a id="more"></a></li>
<li>REST的关键词<ol>
<li>资源（Resource）</li>
<li>资源的表述（Representation）</li>
<li>状态转移（State Transfer）</li>
<li>统一接口（Uniform Interface）</li>
<li>超文本驱动（Hypertext Driven）</li>
</ol>
</li>
</ul>
<ul>
<li>REST的特征<ol>
<li>面向资源（Resource Oriented）</li>
<li>可寻址（Addressability）</li>
<li>连通性（Connectedness）</li>
<li>无状态（Statelessness）</li>
<li>统一接口（Uniform Interface）</li>
<li>超文本驱动（Hypertext Driven）</li>
</ol>
</li>
</ul>
<p>更多可以参考：<a href="http://www.infoq.com/cn/articles/understanding-restful-style" target="_blank" rel="external">理解本真的REST架构风格</a></p>
<ul>
<li>开始创建RESTful工程<br>我们依旧使用IDEA作为开发工具，首先依旧是新建一个SpringInitializr项目，这里和前面的HelloWorld程序一样，但是在勾选Dependensencise时需要额外勾上MySQL和MyBaties.<br><img src="http://oo3aq3ac8.bkt.clouddn.com/007.png" alt="勾选Dependensencise"></li>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`city`</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`city`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'城市编号'</span>,</div><div class="line">  <span class="string">`province_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'省份编号'</span>,</div><div class="line">  <span class="string">`city_name`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'城市名称'</span>,</div><div class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
</li>
<li><p>创建工程目录如下<br><img src="http://oo3aq3ac8.bkt.clouddn.com/008.png" alt="创建工程目录"></p>
</li>
</ul>
<p>Controller包里存放控制器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.RuntimeNode;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="keyword">import</span> org.vzard.springboot.domain.City;</div><div class="line"><span class="keyword">import</span> org.vzard.springboot.service.CityService;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by V-zar on 2017/7/2.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityRestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CityService cityService;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/vzard/city/&#123;id&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">findOneCity</span><span class="params">(@PathVariable Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> cityService.findCityById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/vzard/city"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">findAllCity</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> cityService.findAllCity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/vzard/city"</span>,method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCity</span><span class="params">(@RequestBody City city)</span></span>&#123;</div><div class="line">        cityService.saveCity(city);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/vzard/city"</span>,method = RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyCity</span><span class="params">(@RequestBody City city)</span></span>&#123;</div><div class="line">        cityService.updateCity(city);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/vzard/city/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyCity</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">        cityService.deleteCity(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>dao包存放接口类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</div><div class="line"><span class="keyword">import</span> org.vzard.springboot.domain.City;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 城市DAO接口类</div><div class="line"> *</div><div class="line"> * Created by V-zar on 2017/7/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取城市信息列表</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;City&gt; <span class="title">findAllCity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据id获取城市信息</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">City <span class="title">findById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 保存城市信息</div><div class="line">     * <span class="doctag">@param</span> city</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Long <span class="title">saveCity</span><span class="params">(City city)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新城市信息</div><div class="line">     * <span class="doctag">@param</span> city</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Long <span class="title">updateCity</span><span class="params">(City city)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除城市信息</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Long <span class="title">deleteCity</span><span class="params">(Long id)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>domain包存放实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot.domain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 城市实体类</div><div class="line"> *</div><div class="line"> * Created by V-zar on 2017/7/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 城市id</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 省份id</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Long provinceId;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 城市名称</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String cityName;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getProvinceId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> provinceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceId</span><span class="params">(Long provinceId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.provinceId = provinceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCityName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityName</span><span class="params">(String cityName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cityName = cityName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.description = description;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>service包里存放服务接口及其实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.vzard.springboot.domain.City;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 城市业务逻辑接口</div><div class="line"> *</div><div class="line"> * Created by V-zar on 2017/7/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取城市列表</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;City&gt; <span class="title">findAllCity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据城市id寻找城市</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">City <span class="title">findCityById</span><span class="params">(Long id)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 保存城市信息</div><div class="line">     * <span class="doctag">@param</span> city</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Long <span class="title">saveCity</span><span class="params">(City city)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新城市信息</div><div class="line">     * <span class="doctag">@param</span> city</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Long <span class="title">updateCity</span><span class="params">(City city)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除城市信息</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Long <span class="title">deleteCity</span><span class="params">(Long id)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot.service.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> org.vzard.springboot.dao.CityDao;</div><div class="line"><span class="keyword">import</span> org.vzard.springboot.domain.City;</div><div class="line"><span class="keyword">import</span> org.vzard.springboot.service.CityService;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by V-zar on 2017/7/2.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityServiceImpl</span> <span class="keyword">implements</span> <span class="title">CityService</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CityDao cityDao;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">findAllCity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityDao.findAllCity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">findCityById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityDao.findById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">saveCity</span><span class="params">(City city)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityDao.saveCity(city);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">updateCity</span><span class="params">(City city)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityDao.updateCity(city);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">deleteCity</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityDao.deleteCity(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序入口类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"org.vzard.springboot.dao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringbootApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数据源&amp;MyBaties&amp;端口配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#数据源配置</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/springbootdb?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=5432</div><div class="line">spring.datasource.dbcp2.driver-class-name=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">#Mybatis 配置</div><div class="line">mybatis.typeAliasesPackage=org.vzard.springboot.domain</div><div class="line">mybatis.mapperLocations=classpath:mapper/*.xml</div><div class="line"></div><div class="line">#配置端口</div><div class="line">server.port=$&#123;port:8009&#125;</div></pre></td></tr></table></figure></p>
<p>Mybaties映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.vzard.springboot.dao.CityDao"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"org.vzard.springboot.domain.City"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"province_id"</span> <span class="attr">property</span>=<span class="string">"provinceId"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"city_name"</span> <span class="attr">property</span>=<span class="string">"cityName"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"description"</span> <span class="attr">property</span>=<span class="string">"description"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parameterMap</span> <span class="attr">id</span>=<span class="string">"City"</span> <span class="attr">type</span>=<span class="string">"org.vzard.springboot.domain.City"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></div><div class="line">        id, province_id, city_name, description</div><div class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></div><div class="line">        select</div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></div><div class="line">        from city</div><div class="line">        where id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllCity"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></div><div class="line">        select</div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></div><div class="line">        from city</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveCity"</span> <span class="attr">parameterMap</span>=<span class="string">"City"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">        insert into</div><div class="line">        city(id,province_id,city_name,description)</div><div class="line">        values</div><div class="line">        (#&#123;id&#125;,#&#123;provinceId&#125;,#&#123;cityName&#125;,#&#123;description&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateCity"</span> <span class="attr">parameterMap</span>=<span class="string">"City"</span>&gt;</span></div><div class="line">        update</div><div class="line">        city</div><div class="line">        set</div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"provinceId!=null"</span>&gt;</span></div><div class="line">            province_id = #&#123;provinceId&#125;,</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cityName!=null"</span>&gt;</span></div><div class="line">            city_name = #&#123;cityName&#125;,</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description!=null"</span>&gt;</span></div><div class="line">            description = #&#123;description&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        where</div><div class="line">        id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCity"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></div><div class="line">        delete from</div><div class="line">        city</div><div class="line">        where</div><div class="line">        id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>到此工程创建完毕运行程序入口类启动项目：</p>
<ul>
<li><p>插入记录，URL：<a href="http://127.0.0.1:8009/vzard/city" target="_blank" rel="external">http://127.0.0.1:8009/vzard/city</a><br><img src="http://oo3aq3ac8.bkt.clouddn.com/009.png" alt="插入记录"></p>
</li>
<li><p>更改记录，URL:<a href="http://127.0.0.1:8009/vzard/city" target="_blank" rel="external">http://127.0.0.1:8009/vzard/city</a><br><img src="http://oo3aq3ac8.bkt.clouddn.com/010.png" alt="更改记录"></p>
</li>
<li><p>删除记录，URL:<a href="http://127.0.0.1:8009/vzard/city/2" target="_blank" rel="external">http://127.0.0.1:8009/vzard/city/2</a><br><img src="http://oo3aq3ac8.bkt.clouddn.com/014.png" alt="删除记录"></p>
</li>
<li><p>查询记录<br><img src="http://oo3aq3ac8.bkt.clouddn.com/013.png" alt="查询记录"></p>
</li>
</ul>
<p><em>表单提交的测试工具为Chrome的插件PostMan,很强大</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习HelloWorld之后，我们来尝试构建一个RESTful工程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是REST?&lt;br&gt;首先，REST是Web自身的架构风格。REST也是Web之所以取得成功的技术架构方面因素的总结。REST是世界上最成功的分布式应用架构风格（成功案例：Web，还不够吗？）。它是为 运行在互联网环境 的 分布式 超媒体系统量身定制的。互联网环境与企业内网环境有非常大的差别，最主要的差别是两个方面：&lt;br&gt;可伸缩性需求无法控制：并发访问量可能会暴涨，也可能会暴跌。&lt;br&gt;安全性需求无法控制：无法控制客户端发来的请求的格式，很可能会是恶意的请求。&lt;br&gt;而所谓的“超媒体系统”，即，使用了超文本的系统。可以把“超媒体”理解为超文本+媒体内容。&lt;br&gt;REST是HTTP/1.1协议等Web规范的设计指导原则，HTTP/1.1协议正是为实现REST风格的架构而设计的。新的Web规范，其设计必须符合REST的要求，否则整个Web的体系架构会因为引入严重矛盾而崩溃。这句话不是危言耸听，做个类比，假如苏州市政府同意在市区著名园林的附近大型土木，建造大量具有后现代风格的摩天大楼，那么不久之后世界闻名的苏州园林美景将不复存在。&lt;br&gt;上述这些关于“REST是什么”的描述，可以总结为一句话：REST是所有Web应用都应该遵守的架构设计指导原则。当然，REST并不是法律，违反了REST的指导原则，仍然能够实现应用的功能。但是违反了REST的指导原则，会付出很多代价，特别是对于大流量的网站而言。
    
    </summary>
    
      <category term="springboot" scheme="http://vzardlloo.github.io/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot学习之HelloWorld篇</title>
    <link href="http://vzardlloo.github.io/2017/06/28/springboot%E5%AD%A6%E4%B9%A0%E4%B9%8BHelloWorld%E7%AF%87/"/>
    <id>http://vzardlloo.github.io/2017/06/28/springboot学习之HelloWorld篇/</id>
    <published>2017-06-28T15:22:23.000Z</published>
    <updated>2017-06-28T15:34:08.376Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习springboot,然后将在博客上记录和总结学习的过程。这篇主要是讲如何搭建springboot的开发环境，并且完成HelloWorld程序，使用的开发工具是IDEA.<br>  springboot官网上对springboot的介绍如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Spring Boot makes it easy to create stand-alone, production-grade Spring </div><div class="line">based Applications that you can &quot;just run&quot;. We take an opinionated view </div><div class="line">of the Spring platform and third-party libraries so you can get started </div><div class="line">withminimum fuss. Most Spring Boot applications need very little Spring </div><div class="line">configuration.</div></pre></td></tr></table></figure></p>
<p>主要意思就是说springboot只需要很少的配置便可以创建可“运行”的独立的、生产级的基于Spring的应用程序。<br>springboot的主要特征为：</p>
<ul>
<li>创建独立的Spring应用程序</li>
<li>直接嵌入Tomcat，Jetty或Undertow（不需要部署WAR文件）</li>
<li>提供有意思的“启动”POM来简化您的Maven配置</li>
<li>尽可能自动配置</li>
<li>提供生产就绪功能，如指标，运行状况检查和外部化配置</li>
<li>绝对没有代码生成，也不需要XML配置</li>
</ul>
<p>下面我们开始写第一个springboot的HelloWorld程序：<br>一、新建一个Spring Initializr项目<br><img src="http://oo3aq3ac8.bkt.clouddn.com/001.png" alt="新建一个Spring Initializr项目"><br>二、填写Group和Artifact名称<br><img src="http://oo3aq3ac8.bkt.clouddn.com/002.png" alt="填写Group和Artifact名称"><br>三、在Dependensencise里勾选上Web<br>    在HelloWorld阶段只需勾选Web,之后还需增加别的依赖<br><img src="http://oo3aq3ac8.bkt.clouddn.com/003.png" alt="勾选上Web"><br>然后一直点下一步，会自动生成项目初始的结构，如下图所示：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/004.png" alt=""><br>然后新建一个包，可以命名为web,用来放置控制器，编写HelloWorldController，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.vzard.springboot.web;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by V-zar on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终结构如图：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/005.png" alt=""><br>然后点击运行，等待运行成功，打开浏览器输入<code>http://localhost:8080</code>，如果看到如下图所示，即表明成功：<br><img src="http://oo3aq3ac8.bkt.clouddn.com/006.png" alt=""></p>
<p><em>注：如果失败，可以查看代码及依赖是否有误，和8080端口是否被占用，具体其他问题查看报错信息分析。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始学习springboot,然后将在博客上记录和总结学习的过程。这篇主要是讲如何搭建springboot的开发环境，并且完成HelloWorld程序，使用的开发工具是IDEA.&lt;br&gt;  springboot官网上对springboot的介绍如下：&lt;br&gt;&lt;figur
    
    </summary>
    
      <category term="springboot" scheme="http://vzardlloo.github.io/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>Java命令行运行的一个小坑</title>
    <link href="http://vzardlloo.github.io/2017/06/04/Java%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/"/>
    <id>http://vzardlloo.github.io/2017/06/04/Java命令行运行的一个小坑/</id>
    <published>2017-06-04T08:57:38.000Z</published>
    <updated>2017-06-04T09:58:13.899Z</updated>
    
    <content type="html"><![CDATA[<p>当我们开始学习JAVA时，第一件事无疑是配置JAVA的开发环境，通常来说包含安装JDK和配置环境变量这两个步骤。安装JDK略过不提，在配置环境变量的时候，很多资料一般都是这么说的:</p>
<ul>
<li>JAVA_HOME—&gt;JDK安装根目录</li>
<li>PATH增加%JAVA_HOME%\bin</li>
<li>CLASS_PATH—&gt;%JAVA_HOME%\lib<br>但是这样是有问题的，比如你有这样的程序：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package org.net;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by V-zar on 2017/5/22.</div><div class="line"> */</div><div class="line">public class Test &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        System.out.print(&quot;HelloWorld&quot;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当你在某个目录编译<code>javac Test.java</code>后，试图用java命令<code>java Test</code>运行的时候,会发现报错<code>找不到或无法加载主类</code>。这是因为按照很多资料那样来配置的时候CLASS_PATH是错误的，解决的办法有两个：</p>
<ul>
<li>运行时加入参数<code>java -cp . Test</code> (运行时指定classpath为当前路径)。</li>
<li>在环境变量CLASS_PATH中加入<code>.</code>,表示当前路径，Java解释器将在当前路径搜索class<br>文件，如果CLASS_PATH中有多个路径值，建议将<code>.</code>置顶。（一劳永逸的方法）。</li>
</ul>
<p>另外，如果你是用Eclipse或者IDEA编辑程序的话，一般会在程序开头加入包的信息，如<br><code>package org.net;</code>,这同样会导致错误，所以如果是用Eclipse或者IDEA编辑程序并且试图在命令行运行程序的话，最好检查一下程序开头有没有包的信息，有的话需要删掉:-).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们开始学习JAVA时，第一件事无疑是配置JAVA的开发环境，通常来说包含安装JDK和配置环境变量这两个步骤。安装JDK略过不提，在配置环境变量的时候，很多资料一般都是这么说的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JAVA_HOME—&amp;gt;JDK安装根目录&lt;/li&gt;
&lt;li&gt;P
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>Java类加载器小结</title>
    <link href="http://vzardlloo.github.io/2017/05/15/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://vzardlloo.github.io/2017/05/15/Java类加载器小结/</id>
    <published>2017-05-15T15:49:16.000Z</published>
    <updated>2017-08-20T12:58:31.661Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Bootstrap ClassLoader</li>
</ol>
<p>负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类</p>
<ol>
<li>Extension ClassLoader</li>
</ol>
<p>负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包</p>
<ol>
<li>App ClassLoader</li>
</ol>
<p>负责记载classpath中指定的jar包及目录中class</p>
<ol>
<li>Custom ClassLoader</li>
</ol>
<p>属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader</p>
<p>加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Bootstrap ClassLoader&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extension ClassLoade
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>Java知识点整理（一）</title>
    <link href="http://vzardlloo.github.io/2017/05/09/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vzardlloo.github.io/2017/05/09/Java知识点整理（一）/</id>
    <published>2017-05-09T15:33:56.000Z</published>
    <updated>2017-06-09T14:38:19.684Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>getParameter()是获取POST/GET传递的参数值；<br>getInitParameter获取Tomcat的server.xml中设置Context的初始化参数<br>getAttribute()是获取对象容器中的数据值；<br>getRequestDispatcher是请求转发。</li>
<li>HttpServlet是GenericServlet的子类。<br>GenericServlet是个抽象类，必须给出子类才能实例化。它给 出了设计servlet的一些骨架，定义了servlet生命周期，还有一些得到名字、配置、初始化参数的方法，其设计的是和应用层协议无关的，也就是说 你有可能用非http协议实现它。<br>HttpServlet是子类，当然就具有GenericServlet的一切特性，还添加了doGet, doPost, doDelete, doPut, doTrace等方法对应处理http协议里的命令的请求响应过程。<br>一般没有特殊需要，自己写的Servlet都扩展HttpServlet 。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;getParameter()是获取POST/GET传递的参数值；&lt;br&gt;getInitParameter获取Tomcat的server.xml中设置Context的初始化参数&lt;br&gt;getAttribute()是获取对象容器中的数据值；&lt;br&gt;getReques
    
    </summary>
    
      <category term="JAVA" scheme="http://vzardlloo.github.io/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>图床测试</title>
    <link href="http://vzardlloo.github.io/2017/04/08/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95/"/>
    <id>http://vzardlloo.github.io/2017/04/08/图床测试/</id>
    <published>2017-04-08T12:07:20.000Z</published>
    <updated>2017-04-08T12:19:13.532Z</updated>
    
    <content type="html"><![CDATA[<p>图床测试：这是一张图片</p>
<p><img src="http://oo3aq3ac8.bkt.clouddn.com/58836065_p0.png" alt=""></p>
<p><img src="http://oo3aq3ac8.bkt.clouddn.com/002.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图床测试：这是一张图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/58836065_p0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oo3aq3ac8.bkt.clouddn.com/
    
    </summary>
    
      <category term="杂谈" scheme="http://vzardlloo.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>java垃圾回收算法小结</title>
    <link href="http://vzardlloo.github.io/2017/04/02/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://vzardlloo.github.io/2017/04/02/java垃圾回收算法小结/</id>
    <published>2017-04-02T13:57:37.000Z</published>
    <updated>2017-04-02T14:05:34.268Z</updated>
    
    <content type="html"><![CDATA[<p>两个最基本的java回收算法：复制算法和标记清理算法<br><code>复制算法</code>：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法<br><code>标记清理</code>：一块区域，标记要回收的对象，然后回收，一定会出现碎片，那么引出<br><code>标记-整理算法</code>：多了碎片整理，整理出更大的内存放更大的对象<br><code>两个概念</code>：新生代和年老代</p>
<ul>
<li>新生代：初始对象，生命周期短的</li>
<li>永久代：长时间存在的对象</li>
</ul>
<p>整个java的垃圾回收是新生代和年老代的协作，这种叫做分代回收。</p>
<p>P.S：Serial New收集器是针对新生代的收集器:采用的是复制算法<br>Parallel New（并行）收集器:新生代采用复制算法，老年代采用标记整理<br>Parallel Scavenge（并行）收集器:针对新生代，采用复制收集算法<br>Serial Old（串行）收集器:新生代采用复制，老年代采用标记整理<br>Parallel Old（并行）收集器:针对老年代，标记整理<br>CMS收集器:基于标记清理<br>G1收集器：整体上是基于标记 整理 ，局部采用复制</p>
<h3 id="综上新生代基本采用复制算法老年代采用标记整理算法-cms采用标记清理"><a href="#综上：新生代基本采用复制算法，老年代采用标记整理算法。cms采用标记清理。" class="headerlink" title="综上：新生代基本采用复制算法，老年代采用标记整理算法。cms采用标记清理。"></a>综上：新生代基本采用复制算法，老年代采用标记整理算法。cms采用标记清理。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两个最基本的java回收算法：复制算法和标记清理算法&lt;br&gt;&lt;code&gt;复制算法&lt;/code&gt;：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法&lt;br&gt;&lt;code&gt;标记清理&lt;/code&gt;：一块区域，标记要回收的对象，然后回收，一定会出现碎片，那
    
    </summary>
    
      <category term="jvm" scheme="http://vzardlloo.github.io/categories/jvm/"/>
    
    
  </entry>
  
  <entry>
    <title>SQl学习（二）</title>
    <link href="http://vzardlloo.github.io/2017/03/22/SQl%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://vzardlloo.github.io/2017/03/22/SQl学习（二）/</id>
    <published>2017-03-22T12:28:27.000Z</published>
    <updated>2017-03-22T14:19:06.695Z</updated>
    
    <content type="html"><![CDATA[<p>这篇介绍数据库的基本数据类型和基本的增删改查：</p>
<p>基本数据类型：（MySQL）</p>
<ol>
<li><p>整数类型：</p>
<ul>
<li><code>TINYINT</code> : 占用1个字节</li>
<li><code>SMALLINT</code>　：占用2个字节</li>
<li><code>MEDIUMINT</code> : 占用3个字节</li>
<li><code>INT</code> : 占用4个字节</li>
<li><code>BIGINT</code> :　占用８个字节</li>
</ul>
</li>
<li><p>浮点类型：</p>
<ul>
<li><code>FLOAT</code> : 占用4个字节</li>
<li><code>DOUBLE</code> : 占用8个字节</li>
<li><code>DECIMAL(M,D)</code> :　M+2</li>
</ul>
</li>
<li><p>日期与时间:</p>
<ul>
<li><code>YEAR</code> : 1901~2155    YYYY</li>
<li><code>DATE</code> : 1000-01-01~9999—12-3     YYYY-MM-DD</li>
<li><code>TIME</code> : -838:59:59~838:59:59     HH:MM:SS</li>
<li><code>DATETIME</code> : 1000-01-01 00:00:00~9999-12-31 23:59:59  YYYY-MM-DD HH:MM:SS</li>
<li><code>TIMESTAMP</code> :　1970-01-01 00:00:01~2038-01-19 03:14:07     YYYY-MM-DD </li>
</ul>
</li>
<li><p>字符串&amp;二进制:</p>
<ul>
<li><code>CHAR</code> : 表示长度固定的字符串</li>
<li><code>VARCHAR</code> :　表示可变长度的字符串</li>
<li><code>BINARY</code> : 表示固定长度的二进制数据</li>
<li><code>VARBINARY</code> :　表示可变长度的二进制数据</li>
<li><code>BLOB</code> :　表示二进制大数据</li>
<li><code>TEXT</code> :　用于表示大文本数据</li>
<li><code>ENUM</code> :　用于枚举类型，只能存储一个枚举类型的值</li>
<li><code>SET</code> : 表示字符串对象</li>
<li><code>BIT</code> : 表示位字段类型</li>
</ul>
</li>
</ol>
<p>基本增删改查：</p>
<ol>
<li><p>INSERT（增）：</p>
<ul>
<li><p>插入一条记录：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT INTO table_name ([column_1],[column_2],...[column_n])</div><div class="line">VALUES(values_1,values_2,...,values_n);</div></pre></td></tr></table></figure>
<p>  需要注意[column_x] 与 values_x 的对应关系。可以省略<code>[column_x]</code>列表，<br>  但是此时必须将<code>values_x</code>写全并与表中的列对应。也可以省略部分，省略的列将由<code>NULL</code>填充。</p>
</li>
</ul>
</li>
<li><p>DELETE(删):</p>
<ul>
<li>删除表中全部数据：<code>DELETE FROM table_name</code>。</li>
<li>删除表中指定数据：<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DELETE FROM table_name WHERE &quot;XXX&quot;=&quot;xxx&quot; [AND] &quot;YYY&quot; = &quot;yyy&quot; [OR]</div><div class="line">&quot;ZZZ&quot; = &quot;zzz&quot;;</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
<li><p>UPDATE(改)：</p>
<ul>
<li><p>改变表中指定记录：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE FROM table_name SET　&quot;XXX&quot; = &quot;xxx&quot;　WHERE &quot;XXX&quot; = &quot;yyy&quot; ;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>同时改变多条记录：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UPDATE FROM table_name SET [column_1] = &apos;new_1&apos; , </div><div class="line">                           [column_2] = &apos;new_2&apos; ,</div><div class="line">                           ...</div><div class="line">                           [column_n] = &apos;new_3&apos; ;</div><div class="line">               WHERE [column_1] = &apos;old_1&apos; AND &apos;old_2&apos;...AND &apos;old_n&apos;;</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
<li><p>SELECT(查)：</p>
<ul>
<li>查看表中所有数据：<code>SELECT * FROM　table_name;</code></li>
<li>查看表中指定数据：<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT [column_1],[column_2]...[column_x] FROM table_name </div><div class="line">WHERE</div><div class="line">  [column_y] = &quot;something&quot; [AND] ... [OR] ...[BETWEEN]...</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇介绍数据库的基本数据类型和基本的增删改查：&lt;/p&gt;
&lt;p&gt;基本数据类型：（MySQL）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;整数类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TINYINT&lt;/code&gt; : 占用1个字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMALLINT&lt;/c
    
    </summary>
    
      <category term="SQL" scheme="http://vzardlloo.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL入门（一）</title>
    <link href="http://vzardlloo.github.io/2017/03/20/SQL%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vzardlloo.github.io/2017/03/20/SQL入门（一）/</id>
    <published>2017-03-20T14:33:27.000Z</published>
    <updated>2017-03-20T14:53:30.311Z</updated>
    
    <content type="html"><![CDATA[<p>这是我记录和梳理自己学习SQL的系列文章的第一篇。这系列文章主要以MySQL为学习对象，但其他数据库也基本适用。<br>  首先我们要明确几个最近的概念：</p>
<ul>
<li>数据库：保持表和其他相关SQL结构的容器。</li>
<li>表：数据库中包含数据的结构，由行和列组成。</li>
<li>列：存储表中的一块数据。</li>
<li><p>行：一组能够描述某个事物的列的集合。</p>
<p>下面是基本语法：</p>
</li>
</ul>
<ol>
<li>显示数据库：<code>SHOW DATABASES;</code></li>
<li>指明使用某个数据库：<code>USE database_name;</code></li>
<li>显示数据库中的表：<code>SHOW TABLES;</code></li>
<li>创建一个数据库：<code>CREATE DATABASE database_name;</code></li>
<li>创建一个数据表：<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABALE table_name(</div><div class="line">        [column_name_1]  datatype_1,</div><div class="line">        [column_name_2]  datatype_2,</div><div class="line">        ...</div><div class="line">        [column_name_n]  datatype_n</div><div class="line">    );</div></pre></td></tr></table></figure>
</code></pre></li>
</ol>
<p>  下一篇介绍数据库的基本数据类型和基本的增删改查。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我记录和梳理自己学习SQL的系列文章的第一篇。这系列文章主要以MySQL为学习对象，但其他数据库也基本适用。&lt;br&gt;  首先我们要明确几个最近的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库：保持表和其他相关SQL结构的容器。&lt;/li&gt;
&lt;li&gt;表：数据库中包含数据的结构，由
    
    </summary>
    
      <category term="SQL" scheme="http://vzardlloo.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>新的任务</title>
    <link href="http://vzardlloo.github.io/2017/03/15/%E6%96%B0%E7%9A%84%E4%BB%BB%E5%8A%A1/"/>
    <id>http://vzardlloo.github.io/2017/03/15/新的任务/</id>
    <published>2017-03-15T14:21:39.000Z</published>
    <updated>2017-03-15T14:41:24.681Z</updated>
    
    <content type="html"><![CDATA[<p>今天接到做一个移动端应用的任务，这是我之前没有接触过的，不过这种情况也不是第一次了，所以心态还是比较淡定。关于这个移动端应用开始能够想到的解决方案有3种：</p>
<ul>
<li>采用原生APP的制作方式</li>
<li>采用H5App来快速开发</li>
<li>开发微信小程序</li>
</ul>
<p>然后逐一对三种方案进行分析，原生APP性能方面应该更优，但是开发成本难度应该更大，开发周期也更长。H5App性能方面应该略差一点，但开发难度应该更低，开发时间也更短。微信小程序需要通过企业认证才可以进行开发，暂时不了解。考虑到该项目对性能要求不高，所以排除采用原生APP的方案，对于H5开发暂时决定采用APICloud进行开发，下面开始着手学习相关文档。微信小程序先尝试解决企业认证问题，不过感觉坑略多。<br>加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天接到做一个移动端应用的任务，这是我之前没有接触过的，不过这种情况也不是第一次了，所以心态还是比较淡定。关于这个移动端应用开始能够想到的解决方案有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用原生APP的制作方式&lt;/li&gt;
&lt;li&gt;采用H5App来快速开发&lt;/li&gt;
&lt;li&gt;开发
    
    </summary>
    
      <category term="杂谈" scheme="http://vzardlloo.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://vzardlloo.github.io/2017/03/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://vzardlloo.github.io/2017/03/07/第一篇博客/</id>
    <published>2017-03-07T11:59:26.000Z</published>
    <updated>2017-03-12T09:25:21.648Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的个人博客里发布的第一篇博客，在过去的几天里我抽空采用GitHubPage+Hexo初步搭建了一个人博客。为什么要搭建一个个人博客呢？原因主要有下面几个：</p>
<p>1.一些网站提供给用户的自由度太低，不能满足自己想随心所欲地折腾的愿望，在这里不会有发帖审查，不会有删帖，基本完全属于自己。<br>2.感觉经常总结和保持向外输出是一种比较高效的学习方式，所以博客里会写一些平时学习的总结。<br>3.老早就知道GitHub有提供这个平台，一直想尝试一下，同时也可以当做自己的一个名片或简历。<br>4.我就是爱折腾……</p>
<p>博客以后还会不断完善，增加功能，欢迎大家关注捧场。有搭建个人博客意向但没有相关经验的同学可以私下交流，QQ:2942708438</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我的个人博客里发布的第一篇博客，在过去的几天里我抽空采用GitHubPage+Hexo初步搭建了一个人博客。为什么要搭建一个个人博客呢？原因主要有下面几个：&lt;/p&gt;
&lt;p&gt;1.一些网站提供给用户的自由度太低，不能满足自己想随心所欲地折腾的愿望，在这里不会有发帖审查，不会
    
    </summary>
    
      <category term="杂谈" scheme="http://vzardlloo.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
